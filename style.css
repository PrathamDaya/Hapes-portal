<script>
// IMPORTANT: REPLACE THIS WITH YOUR ACTUAL DEPLOYED WEB APP URL from Google Apps Script
const scriptURL = 'https://script.google.com/macros/s/AKfycbzH4whliZSRjcTeoA_8UQAzM9OmtNohfqiQKmeoJZWXa_xQOHg_e11bTRavjcjZqtzn/exec'; // <<< ENSURE THIS IS YOUR CORRECT, NEWLY DEPLOYED URL
const screens = document.querySelectorAll('.screen');
const feelingsPages = document.querySelectorAll('#feelingsPortalScreen .page');
const diaryPages = document.querySelectorAll('#diaryScreen .page');

let currentEmotion = '';
let calendarCurrentDate = new Date();
let diaryEntries = {}; // Stores diary entries fetched from the sheet, keyed by YYYY-MM-DD

// --- Main Navigation ---
function navigateToApp(screenId) {
    screens.forEach(screen => screen.classList.remove('active'));
    document.getElementById(screenId).classList.add('active');

    if (screenId === 'feelingsPortalScreen') {
        navigateToFeelingsPage('feelingsPage1');
    } else if (screenId === 'diaryScreen') {
        fetchDiaryEntries().then(() => {
            renderCalendar(calendarCurrentDate);
            navigateToDiaryPage('diaryCalendarPage');
        });
    }
}

// --- Hetu's Feelings Portal ---
function navigateToFeelingsPage(pageId, emotion = '') {
    feelingsPages.forEach(page => page.classList.remove('active'));
    const targetPage = document.getElementById(pageId);
    if (targetPage) targetPage.classList.add('active');
    else { console.error('Feelings page not found:', pageId); return; }

    if (emotion) {
        currentEmotion = emotion;
        document.getElementById('selectedEmotion').textContent = emotion;
    }

    if (pageId === 'feelingsPage2') {
        document.getElementById('feelingsMessage').value = ''; // Clear message on new entry
    }
}

async function submitFeelingsEntry() {
    const feelingsMessage = document.getElementById('feelingsMessage').value.trim();
    if (!feelingsMessage) {
        alert('Please write something before submitting!');
        return;
    }

    const submitBtn = document.getElementById('submitFeelingsBtn');
    submitBtn.disabled = true;
    submitBtn.textContent = 'Submitting...';

    const formData = new FormData();
    formData.append('formType', 'feelingsEntry');
    formData.append('emotion', currentEmotion);
    formData.append('message', feelingsMessage);

    try {
        const response = await fetch(scriptURL, {
            method: 'POST',
            body: formData,
        });
        const result = await response.json();

        if (result.status === 'success') {
            navigateToFeelingsPage('feelingsConfirmationPage');
        } else {
            alert('Error saving entry: ' + result.message);
        }
    } catch (error) {
        console.error('Error!', error.message);
        alert('Could not submit feelings entry. Please try again. Error: ' + error.message);
    } finally {
        submitBtn.disabled = false;
        submitBtn.textContent = 'Submit';
    }
}

async function fetchAllFeelingsEntries() {
    const tableBody = document.getElementById('feelingsEntriesTableBody');
    if (!tableBody) {
        console.error('Feelings table body not found.');
        return;
    }
    tableBody.innerHTML = '<tr><td colspan="3" class="loading-indicator">Loading entries...</td></tr>';
    navigateToFeelingsPage('allFeelingsEntriesPage');

    try {
        const response = await fetch(`${scriptURL}?action=getFeelingsEntries`);
        const serverData = await response.json();

        if (serverData.status === 'success' && serverData.data) {
            tableBody.innerHTML = ''; // Clear loading indicator
            if (serverData.data.length === 0) {
                tableBody.innerHTML = '<tr><td colspan="3">No feelings entries recorded yet.</td></tr>';
            } else {
                serverData.data.forEach(entry => {
                    const row = tableBody.insertRow();
                    const timestampCell = row.insertCell();
                    const emotionCell = row.insertCell();
                    const messageCell = row.insertCell();

                    timestampCell.textContent = entry.timestamp;
                    emotionCell.textContent = entry.emotion;
                    messageCell.textContent = entry.message;
                });
            }
        } else {
            tableBody.innerHTML = `<tr><td colspan="3">Error loading entries: ${serverData.message || 'Unknown response'}</td></tr>`;
            alert('Error loading entries: ' + (serverData.message || 'Unknown response'));
        }
    } catch (error) {
        console.error('Failed to fetch feelings entries:', error);
        tableBody.innerHTML = '<tr><td colspan="3">Error loading entries.</td></tr>';
        alert('Error loading feelings entries.\n' + error.message);
    }
}

// --- Hetu's Diary ---
function navigateToDiaryPage(pageId) {
    diaryPages.forEach(page => page.classList.remove('active'));
    const targetPage = document.getElementById(pageId);
    if (targetPage) targetPage.classList.add('active');
    else { console.error('Diary page not found:', pageId); return; }
}

async function fetchDiaryEntries() {
    try {
        const response = await fetch(`${scriptURL}?action=getDiaryEntries`);
        const serverData = await response.json();

        if (serverData.status === 'success' && serverData.data) {
            diaryEntries = {}; // Clear previous entries
            serverData.data.forEach(entry => {
                // Ensure date is in YYYY-MM-DD format for key
                let formattedDate = entry.date;
                if (entry.date instanceof Date) {
                    formattedDate = entry.date.toISOString().split('T')[0];
                }
                diaryEntries[formattedDate] = entry;
            });
        } else {
            console.error('Error fetching diary entries:', serverData.message || 'Unknown response');
            alert('Error loading diary entries: ' + (serverData.message || 'Unknown response'));
        }
    } catch (error) {
        console.error('Failed to fetch diary entries:', error);
        alert('Error loading diary entries.\n' + error.message);
    }
}


function renderCalendar(date) {
    const monthYearDisplay = document.getElementById('monthYear');
    const calendarGrid = document.getElementById('calendarGrid');

    monthYearDisplay.textContent = date.toLocaleString('en-US', { month: 'long', year: 'numeric' });
    calendarGrid.innerHTML = '';

    const firstDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1);
    const daysInMonth = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();
    const startDayOfWeek = firstDayOfMonth.getDay(); // 0 for Sunday, 1 for Monday

    const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
    dayNames.forEach(dayName => {
        const dayNameDiv = document.createElement('div');
        dayNameDiv.classList.add('calendar-day');
        dayNameDiv.textContent = dayName;
        calendarGrid.appendChild(dayNameDiv);
    });

    // Adjust for Monday start: if startDayOfWeek is 0 (Sunday), we need 6 empty slots before Monday
    // If it's 1 (Monday), 0 empty slots.
    const emptySlots = (startDayOfWeek === 0) ? 6 : startDayOfWeek - 1; // Assuming Monday is 1st day of week for your display

    for (let i = 0; i < emptySlots; i++) {
        const emptyDiv = document.createElement('div');
        emptyDiv.classList.add('calendar-day', 'empty');
        calendarGrid.appendChild(emptyDiv);
    }

    const today = new Date();
    today.setHours(0,0,0,0); // Normalize today's date

    for (let i = 1; i <= daysInMonth; i++) {
        const dayDiv = document.createElement('div');
        dayDiv.classList.add('calendar-day', 'current-month');
        dayDiv.textContent = i;

        const currentDay = new Date(date.getFullYear(), date.getMonth(), i);
        currentDay.setHours(0,0,0,0); // Normalize current day

        if (currentDay.getTime() === today.getTime()) {
            dayDiv.classList.add('today');
        }

        // Format date for lookup in diaryEntries (YYYY-MM-DD)
        const dayString = currentDay.toISOString().split('T')[0];
        if (diaryEntries[dayString]) {
            dayDiv.classList.add('has-entry');
        }

        dayDiv.addEventListener('click', () => {
            selectDiaryDate(dayString);
        });
        calendarGrid.appendChild(dayDiv);
    }
}

function selectDiaryDate(dateString) {
    // Remove previous selection
    document.querySelectorAll('.calendar-day.selected-day').forEach(day => {
        day.classList.remove('selected-day');
    });

    // Add selection to clicked day
    const selectedDayElement = Array.from(document.querySelectorAll('.calendar-day.current-month')).find(day => {
        const dayNum = parseInt(day.textContent);
        const dayDate = new Date(calendarCurrentDate.getFullYear(), calendarCurrentDate.getMonth(), dayNum);
        return dayDate.toISOString().split('T')[0] === dateString;
    });

    if (selectedDayElement) {
        selectedDayElement.classList.add('selected-day');
    }

    document.getElementById('selectedDiaryDate').textContent = dateString;
    document.getElementById('viewDiaryDate').textContent = dateString;

    if (diaryEntries[dateString]) {
        // If entry exists, populate view page
        document.getElementById('viewDiaryThoughts').textContent = diaryEntries[dateString].thoughts;
        document.getElementById('diaryThoughts').value = diaryEntries[dateString].thoughts; // Also pre-fill for editing
        navigateToDiaryPage('viewDiaryEntryPage');
    } else {
        // If no entry, populate edit page
        document.getElementById('diaryThoughts').value = ''; // Clear for new entry
        navigateToDiaryPage('diaryEntryPage');
    }
}


async function submitDiaryEntry() {
    const selectedDate = document.getElementById('selectedDiaryDate').textContent;
    const diaryThoughts = document.getElementById('diaryThoughts').value.trim();

    if (!selectedDate) {
        alert('Please select a date from the calendar first!');
        return;
    }
    if (!diaryThoughts) {
        alert('Please write your thoughts before saving!');
        return;
    }

    const saveBtn = document.getElementById('saveDiaryEntryBtn');
    saveBtn.disabled = true;
    saveBtn.textContent = 'Saving...';

    const formData = new FormData();
    formData.append('formType', 'diaryEntry');
    formData.append('date', selectedDate); // YYYY-MM-DD format
    formData.append('thoughts', diaryThoughts);

    try {
        const response = await fetch(scriptURL, {
            method: 'POST',
            body: formData,
        });
        const result = await response.json();

        if (result.status === 'success') {
            // Update local cache and re-render calendar to show entry
            diaryEntries[selectedDate] = { date: selectedDate, thoughts: diaryThoughts };
            renderCalendar(calendarCurrentDate); // Re-render to show 'has-entry' mark
            navigateToDiaryPage('diaryConfirmationPage');
        } else {
            alert('Error saving diary entry: ' + result.message);
        }
    } catch (error) {
        console.error('Error!', error.message);
        alert('Could not submit diary entry. Please try again. Error: ' + error.message);
    } finally {
        saveBtn.disabled = false;
        saveBtn.textContent = 'Save Entry';
    }
}

async function fetchAllDiaryEntriesList() {
    const listContainer = document.getElementById('allDiaryEntriesList');
    if (!listContainer) {
        console.error('All diary entries list container not found.');
        return;
    }
    listContainer.innerHTML = '<p class="loading-indicator">Loading entries...</p>';

    try {
        const response = await fetch(`${scriptURL}?action=getDiaryEntries`);
        const serverData = await response.json();

        if (serverData.status === 'success' && serverData.data) {
            listContainer.innerHTML = ''; // Clear loading indicator
            if (serverData.data.length === 0) {
                listContainer.innerHTML = '<p>No diary entries recorded yet.</p>';
            } else {
                // Sort entries by date descending
                serverData.data.sort((a, b) => new Date(b.date) - new Date(a.date));

                serverData.data.forEach(entry => {
                    const entryDiv = document.createElement('div');
                    const formattedDate = new Date(entry.date).toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });
                    entryDiv.innerHTML = `<h3>${formattedDate}</h3><p>${entry.thoughts || 'No thoughts.'}</p><hr>`;
                    listContainer.appendChild(entryDiv);
                });
            }
        } else if (serverData.status === 'success' && (!serverData.data || serverData.data.length === 0)) {
            listContainer.innerHTML = '<p>No diary entries recorded yet.</p>';
        } else {
            listContainer.innerHTML = `<p>Could not load entries: ${serverData.message || 'Unknown response'}</p>`;
        }
        navigateToDiaryPage('allDiaryEntriesPage');
    } catch (error) {
        console.error('Failed to fetch all diary entries list:', error);
        if (listContainer) listContainer.innerHTML = '<p>Error loading all diary entries.</p>';
        alert('Error loading all diary entries.\n' + error.message);
    }
}

// --- Initialization ---
document.addEventListener('DOMContentLoaded', () => {
    navigateToApp('homeScreen');
    const prevMonthBtn = document.getElementById('prevMonthBtn');
    const nextMonthBtn = document.getElementById('nextMonthBtn');

    if (prevMonthBtn) prevMonthBtn.addEventListener('click', () => {
        calendarCurrentDate.setMonth(calendarCurrentDate.getMonth() - 1);
        fetchDiaryEntries().then(() => renderCalendar(calendarCurrentDate));
    });
    if (nextMonthBtn) nextMonthBtn.addEventListener('click', () => {
        calendarCurrentDate.setMonth(calendarCurrentDate.getMonth() + 1);
        fetchDiaryEntries().then(() => renderCalendar(calendarCurrentDate));
    });
});
</script>
